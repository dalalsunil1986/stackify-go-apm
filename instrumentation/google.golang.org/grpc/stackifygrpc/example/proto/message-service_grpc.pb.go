// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	SendMessageClientStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_SendMessageClientStreamClient, error)
	SendMessageServerStream(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (MessageService_SendMessageServerStreamClient, error)
	SendMessageBidiStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_SendMessageBidiStreamClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendMessageClientStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_SendMessageClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[0], "/proto.MessageService/SendMessageClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSendMessageClientStreamClient{stream}
	return x, nil
}

type MessageService_SendMessageClientStreamClient interface {
	Send(*MessageRequest) error
	CloseAndRecv() (*MessageResponse, error)
	grpc.ClientStream
}

type messageServiceSendMessageClientStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceSendMessageClientStreamClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceSendMessageClientStreamClient) CloseAndRecv() (*MessageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) SendMessageServerStream(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (MessageService_SendMessageServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[1], "/proto.MessageService/SendMessageServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSendMessageServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_SendMessageServerStreamClient interface {
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type messageServiceSendMessageServerStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceSendMessageServerStreamClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) SendMessageBidiStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_SendMessageBidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageService_serviceDesc.Streams[2], "/proto.MessageService/SendMessageBidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSendMessageBidiStreamClient{stream}
	return x, nil
}

type MessageService_SendMessageBidiStreamClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type messageServiceSendMessageBidiStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceSendMessageBidiStreamClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceSendMessageBidiStreamClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	SendMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	SendMessageClientStream(MessageService_SendMessageClientStreamServer) error
	SendMessageServerStream(*MessageRequest, MessageService_SendMessageServerStreamServer) error
	SendMessageBidiStream(MessageService_SendMessageBidiStreamServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) SendMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageServiceServer) SendMessageClientStream(MessageService_SendMessageClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessageClientStream not implemented")
}
func (UnimplementedMessageServiceServer) SendMessageServerStream(*MessageRequest, MessageService_SendMessageServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessageServerStream not implemented")
}
func (UnimplementedMessageServiceServer) SendMessageBidiStream(MessageService_SendMessageBidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessageBidiStream not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendMessageClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).SendMessageClientStream(&messageServiceSendMessageClientStreamServer{stream})
}

type MessageService_SendMessageClientStreamServer interface {
	SendAndClose(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type messageServiceSendMessageClientStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceSendMessageClientStreamServer) SendAndClose(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceSendMessageClientStreamServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_SendMessageServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).SendMessageServerStream(m, &messageServiceSendMessageServerStreamServer{stream})
}

type MessageService_SendMessageServerStreamServer interface {
	Send(*MessageResponse) error
	grpc.ServerStream
}

type messageServiceSendMessageServerStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceSendMessageServerStreamServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_SendMessageBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).SendMessageBidiStream(&messageServiceSendMessageBidiStreamServer{stream})
}

type MessageService_SendMessageBidiStreamServer interface {
	Send(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type messageServiceSendMessageBidiStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceSendMessageBidiStreamServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceSendMessageBidiStreamServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessageService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessageClientStream",
			Handler:       _MessageService_SendMessageClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendMessageServerStream",
			Handler:       _MessageService_SendMessageServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendMessageBidiStream",
			Handler:       _MessageService_SendMessageBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message-service.proto",
}
